/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:891884:
  appc.background(230);
} //_CODE_:window1:891884:

public void senseSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:senseSlider:947902:
  SENSE_EXP = senseSlider.getValueF();
} //_CODE_:senseSlider:947902:

public void speedSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:speedSlider:407313:
  SPEED_EXP = speedSlider.getValueF();
} //_CODE_:speedSlider:407313:

public void sizeSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:sizeSlider:310709:
  SIZE_EXP = sizeSlider.getValueF();
} //_CODE_:sizeSlider:310709:

public void iniEnergySliderChanged(GCustomSlider source, GEvent event) { //_CODE_:iniEnergySlider:854979:
  INITIAL_ENERGY = iniEnergySlider.getValueF();
  // Make sure initial energy is lower than baby threshold
  INITIAL_ENERGY = min(INITIAL_ENERGY, BABY_THRESH - 1);
  source.setValue(INITIAL_ENERGY);
} //_CODE_:iniEnergySlider:854979:

public void wanderStrengthSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:wanderStrengthSlider:912690:
  WANDER_STRENGTH = wanderStrengthSlider.getValueF();
} //_CODE_:wanderStrengthSlider:912690:

public void babyThresholdSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:babyThresholdSlider:259897:
  BABY_THRESH = babyThresholdSlider.getValueF();
  // Make sure baby threshold is higher than initial energy
  BABY_THRESH = max(INITIAL_ENERGY + 1, BABY_THRESH);
  source.setValue(BABY_THRESH);
} //_CODE_:babyThresholdSlider:259897:

public void mutationRateSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:mutationRateSlider:389455:
  MUT_SD = mutationRateSlider.getValueF();
} //_CODE_:mutationRateSlider:389455:

public void pauseButtonClicked(GButton source, GEvent event) { //_CODE_:pauseButton:885390:
  if (loop) {
    noLoop();
    loop = false;
    pauseButton.setText("Resume");
    pauseButton.setLocalColorScheme(1);
  } else {
    loop();
    loop = true;
    pauseButton.setText("Pause");
    pauseButton.setLocalColorScheme(0);
  }
} //_CODE_:pauseButton:885390:

public void predationCheckClicked(GCheckbox source, GEvent event) { //_CODE_:predationCheck:597874:
  PREDATION = !PREDATION;
} //_CODE_:predationCheck:597874:

public void restartButtonClicked(GButton source, GEvent event) { //_CODE_:restartButton:956513:
  w.resetPopulation();
} //_CODE_:restartButton:956513:

public void numFoodSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:numFoodSlider:406893:
  w.numFood = numFoodSlider.getValueI();
} //_CODE_:numFoodSlider:406893:

public void popSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:popSlider:692723:
  w.minPopulation = popSlider.getValueI();
} //_CODE_:popSlider:692723:

public void showSenseChecked(GCheckbox source, GEvent event) { //_CODE_:checkbox1:983517:
  SHOW_SENSE_DISTANCE = !SHOW_SENSE_DISTANCE;
} //_CODE_:checkbox1:983517:

public void colourModeListClick(GDropList source, GEvent event) { //_CODE_:colourModeList:569553:
  DRAW_MODE = colourModeList.getSelectedIndex();
} //_CODE_:colourModeList:569553:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Evolution Control Panel", 0, 0, 450, 550, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  label1 = new GLabel(window1, 162, 0, 109, 29);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Creature Traits");
  label1.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label1.setOpaque(false);
  senseSlider = new GCustomSlider(window1, 80, 50, 100, 45, "blue18px");
  senseSlider.setShowValue(true);
  senseSlider.setLimits(0.1, 0.0, 1.0);
  senseSlider.setNumberFormat(G4P.DECIMAL, 2);
  senseSlider.setOpaque(false);
  senseSlider.addEventHandler(this, "senseSliderChanged");
  label2 = new GLabel(window1, 0, 60, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Sense");
  label2.setOpaque(false);
  label3 = new GLabel(window1, 0, 135, 80, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Speed");
  label3.setOpaque(false);
  speedSlider = new GCustomSlider(window1, 80, 125, 100, 45, "blue18px");
  speedSlider.setShowValue(true);
  speedSlider.setLimits(0.2, 0.0, 3.0);
  speedSlider.setNumberFormat(G4P.DECIMAL, 2);
  speedSlider.setOpaque(false);
  speedSlider.addEventHandler(this, "speedSliderChanged");
  label4 = new GLabel(window1, 0, 210, 80, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Size");
  label4.setOpaque(false);
  sizeSlider = new GCustomSlider(window1, 80, 200, 100, 45, "blue18px");
  sizeSlider.setShowValue(true);
  sizeSlider.setLimits(0.7, 0.0, 5.0);
  sizeSlider.setNumberFormat(G4P.DECIMAL, 2);
  sizeSlider.setOpaque(false);
  sizeSlider.addEventHandler(this, "sizeSliderChanged");
  label5 = new GLabel(window1, 112, 273, 80, 20);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Initial Energy");
  label5.setOpaque(false);
  iniEnergySlider = new GCustomSlider(window1, 193, 261, 100, 45, "blue18px");
  iniEnergySlider.setShowValue(true);
  iniEnergySlider.setLimits(100.0, 0.0, 250.0);
  iniEnergySlider.setNumberFormat(G4P.DECIMAL, 2);
  iniEnergySlider.setOpaque(false);
  iniEnergySlider.addEventHandler(this, "iniEnergySliderChanged");
  label6 = new GLabel(window1, 225, 55, 80, 31);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("Wander Strength");
  label6.setOpaque(false);
  wanderStrengthSlider = new GCustomSlider(window1, 305, 50, 100, 45, "blue18px");
  wanderStrengthSlider.setShowValue(true);
  wanderStrengthSlider.setLimits(0.5, 0.0, 1.0);
  wanderStrengthSlider.setNumberFormat(G4P.DECIMAL, 2);
  wanderStrengthSlider.setOpaque(false);
  wanderStrengthSlider.addEventHandler(this, "wanderStrengthSliderChanged");
  label7 = new GLabel(window1, 225, 130, 80, 31);
  label7.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label7.setText("Baby Threshold");
  label7.setOpaque(false);
  babyThresholdSlider = new GCustomSlider(window1, 305, 125, 100, 45, "blue18px");
  babyThresholdSlider.setShowValue(true);
  babyThresholdSlider.setLimits(140.0, 100.0, 250.0);
  babyThresholdSlider.setNumberFormat(G4P.DECIMAL, 2);
  babyThresholdSlider.setOpaque(false);
  babyThresholdSlider.addEventHandler(this, "babyThresholdSliderChanged");
  label8 = new GLabel(window1, 225, 210, 80, 20);
  label8.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label8.setText("Mutation Rate");
  label8.setOpaque(false);
  mutationRateSlider = new GCustomSlider(window1, 305, 200, 100, 45, "blue18px");
  mutationRateSlider.setShowValue(true);
  mutationRateSlider.setLimits(1.0, 0.0, 2.0);
  mutationRateSlider.setNumberFormat(G4P.DECIMAL, 2);
  mutationRateSlider.setOpaque(false);
  mutationRateSlider.addEventHandler(this, "mutationRateSliderChanged");
  pauseButton = new GButton(window1, 75, 500, 80, 30);
  pauseButton.setText("Pause");
  pauseButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  pauseButton.addEventHandler(this, "pauseButtonClicked");
  predationCheck = new GCheckbox(window1, 200, 365, 78, 20);
  predationCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  predationCheck.setText("Predation");
  predationCheck.setOpaque(false);
  predationCheck.addEventHandler(this, "predationCheckClicked");
  predationCheck.setSelected(true);
  restartButton = new GButton(window1, 275, 500, 80, 30);
  restartButton.setText("Restart");
  restartButton.addEventHandler(this, "restartButtonClicked");
  label9 = new GLabel(window1, 149, 311, 127, 35);
  label9.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label9.setText("Simulation Options");
  label9.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label9.setOpaque(false);
  label10 = new GLabel(window1, 0, 360, 80, 20);
  label10.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label10.setText("# of Food");
  label10.setOpaque(false);
  numFoodSlider = new GCustomSlider(window1, 80, 350, 100, 45, "purple18px");
  numFoodSlider.setShowValue(true);
  numFoodSlider.setLimits(10, 0, 30);
  numFoodSlider.setNumberFormat(G4P.INTEGER, 0);
  numFoodSlider.setOpaque(false);
  numFoodSlider.addEventHandler(this, "numFoodSliderChanged");
  label11 = new GLabel(window1, 0, 435, 80, 20);
  label11.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label11.setText("Population");
  label11.setOpaque(false);
  popSlider = new GCustomSlider(window1, 80, 425, 100, 45, "purple18px");
  popSlider.setShowValue(true);
  popSlider.setLimits(10, 10, 100);
  popSlider.setNumberFormat(G4P.INTEGER, 0);
  popSlider.setOpaque(false);
  popSlider.addEventHandler(this, "popSliderChanged");
  checkbox1 = new GCheckbox(window1, 200, 408, 94, 30);
  checkbox1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox1.setText("Show Sense Distance");
  checkbox1.setOpaque(false);
  checkbox1.addEventHandler(this, "showSenseChecked");
  colourModeList = new GDropList(window1, 320, 375, 90, 66, 2, 10);
  colourModeList.setItems(loadStrings("list_569553"), 0);
  colourModeList.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  colourModeList.addEventHandler(this, "colourModeListClick");
  label12 = new GLabel(window1, 322, 344, 84, 23);
  label12.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label12.setText("Colour Mode");
  label12.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GLabel label1; 
GCustomSlider senseSlider; 
GLabel label2; 
GLabel label3; 
GCustomSlider speedSlider; 
GLabel label4; 
GCustomSlider sizeSlider; 
GLabel label5; 
GCustomSlider iniEnergySlider; 
GLabel label6; 
GCustomSlider wanderStrengthSlider; 
GLabel label7; 
GCustomSlider babyThresholdSlider; 
GLabel label8; 
GCustomSlider mutationRateSlider; 
GButton pauseButton; 
GCheckbox predationCheck; 
GButton restartButton; 
GLabel label9; 
GLabel label10; 
GCustomSlider numFoodSlider; 
GLabel label11; 
GCustomSlider popSlider; 
GCheckbox checkbox1; 
GDropList colourModeList; 
GLabel label12; 
