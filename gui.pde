/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:891884:
  appc.background(230);
} //_CODE_:window1:891884:

public void senseSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:senseSlider:947902:
  SENSE_EXP = senseSlider.getValueF();
} //_CODE_:senseSlider:947902:

public void speedSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:speedSlider:407313:
  SPEED_EXP = speedSlider.getValueF();
} //_CODE_:speedSlider:407313:

public void sizeSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:sizeSlider:310709:
  SIZE_EXP = sizeSlider.getValueF();
} //_CODE_:sizeSlider:310709:

public void iniEnergySliderChanged(GCustomSlider source, GEvent event) { //_CODE_:iniEnergySlider:854979:
  INITIAL_ENERGY = iniEnergySlider.getValueF();
} //_CODE_:iniEnergySlider:854979:

public void wanderStrengthSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:wanderStrengthSlider:912690:
  WANDER_STRENGTH = wanderStrengthSlider.getValueF();
} //_CODE_:wanderStrengthSlider:912690:

public void babyThresholdSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:babyThresholdSlider:259897:
  BABY_THRESH = babyThresholdSlider.getValueF();
} //_CODE_:babyThresholdSlider:259897:

public void mutationRateSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:mutationRateSlider:389455:
  MUT_SD = mutationRateSlider.getValueF();
} //_CODE_:mutationRateSlider:389455:

public void pauseButtonClicked(GButton source, GEvent event) { //_CODE_:pauseButton:885390:
  if (loop) {
    noLoop();
    loop = false;
    pauseButton.setText("Resume");
    pauseButton.setLocalColorScheme(6);
  } else {
    loop();
    loop = true;
    pauseButton.setText("Pause");
    pauseButton.setLocalColorScheme(0);
  }
} //_CODE_:pauseButton:885390:

public void predationCheckClicked(GCheckbox source, GEvent event) { //_CODE_:predationCheck:597874:
  if (PREDATION) {
    PREDATION = false;
    println("Predation is now set to", PREDATION);
  } else {
    PREDATION = true;
    println("Predation is now set to", PREDATION);
  }
} //_CODE_:predationCheck:597874:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 360, 360, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  label1 = new GLabel(window1, 133, 9, 86, 26);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Creature Traits");
  label1.setOpaque(false);
  senseSlider = new GCustomSlider(window1, 78, 54, 100, 40, "grey_blue");
  senseSlider.setShowValue(true);
  senseSlider.setLimits(0.5, 0.0, 1.0);
  senseSlider.setNumberFormat(G4P.DECIMAL, 2);
  senseSlider.setOpaque(false);
  senseSlider.addEventHandler(this, "senseSliderChanged");
  label2 = new GLabel(window1, -2, 64, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Sense");
  label2.setOpaque(false);
  label3 = new GLabel(window1, -4, 134, 80, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Speed");
  label3.setOpaque(false);
  speedSlider = new GCustomSlider(window1, 78, 123, 100, 40, "grey_blue");
  speedSlider.setShowValue(true);
  speedSlider.setLimits(0.5, 0.0, 3.0);
  speedSlider.setNumberFormat(G4P.DECIMAL, 2);
  speedSlider.setOpaque(false);
  speedSlider.addEventHandler(this, "speedSliderChanged");
  label4 = new GLabel(window1, -5, 196, 80, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Size");
  label4.setOpaque(false);
  sizeSlider = new GCustomSlider(window1, 76, 187, 100, 40, "grey_blue");
  sizeSlider.setShowValue(true);
  sizeSlider.setLimits(0.5, 0.0, 1.0);
  sizeSlider.setNumberFormat(G4P.DECIMAL, 2);
  sizeSlider.setOpaque(false);
  sizeSlider.addEventHandler(this, "sizeSliderChanged");
  label5 = new GLabel(window1, -1, 260, 80, 20);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Initial Energy");
  label5.setOpaque(false);
  iniEnergySlider = new GCustomSlider(window1, 80, 249, 100, 40, "grey_blue");
  iniEnergySlider.setShowValue(true);
  iniEnergySlider.setLimits(50.0, 0.0, 250.0);
  iniEnergySlider.setNumberFormat(G4P.DECIMAL, 2);
  iniEnergySlider.setOpaque(false);
  iniEnergySlider.addEventHandler(this, "iniEnergySliderChanged");
  label6 = new GLabel(window1, -1, 316, 80, 31);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("Wander Strength");
  label6.setOpaque(false);
  wanderStrengthSlider = new GCustomSlider(window1, 80, 308, 100, 40, "grey_blue");
  wanderStrengthSlider.setShowValue(true);
  wanderStrengthSlider.setLimits(0.5, 0.0, 1.0);
  wanderStrengthSlider.setNumberFormat(G4P.DECIMAL, 2);
  wanderStrengthSlider.setOpaque(false);
  wanderStrengthSlider.addEventHandler(this, "wanderStrengthSliderChanged");
  label7 = new GLabel(window1, 227, 54, 80, 31);
  label7.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label7.setText("Baby Threshold");
  label7.setOpaque(false);
  babyThresholdSlider = new GCustomSlider(window1, 218, 99, 100, 40, "grey_blue");
  babyThresholdSlider.setShowValue(true);
  babyThresholdSlider.setLimits(0.5, 0.0, 250.0);
  babyThresholdSlider.setNumberFormat(G4P.DECIMAL, 2);
  babyThresholdSlider.setOpaque(false);
  babyThresholdSlider.addEventHandler(this, "babyThresholdSliderChanged");
  label8 = new GLabel(window1, 224, 162, 80, 20);
  label8.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label8.setText("Mutation Rate");
  label8.setOpaque(false);
  mutationRateSlider = new GCustomSlider(window1, 216, 192, 100, 40, "grey_blue");
  mutationRateSlider.setShowValue(true);
  mutationRateSlider.setLimits(1.0, 0.0, 2.0);
  mutationRateSlider.setNumberFormat(G4P.DECIMAL, 2);
  mutationRateSlider.setOpaque(false);
  mutationRateSlider.addEventHandler(this, "mutationRateSliderChanged");
  pauseButton = new GButton(window1, 226, 302, 80, 30);
  pauseButton.setText("Pause");
  pauseButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  pauseButton.addEventHandler(this, "pauseButtonClicked");
  predationCheck = new GCheckbox(window1, 205, 251, 120, 20);
  predationCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  predationCheck.setText("Predation");
  predationCheck.setOpaque(false);
  predationCheck.addEventHandler(this, "predationCheckClicked");
  predationCheck.setSelected(true);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GLabel label1; 
GCustomSlider senseSlider; 
GLabel label2; 
GLabel label3; 
GCustomSlider speedSlider; 
GLabel label4; 
GCustomSlider sizeSlider; 
GLabel label5; 
GCustomSlider iniEnergySlider; 
GLabel label6; 
GCustomSlider wanderStrengthSlider; 
GLabel label7; 
GCustomSlider babyThresholdSlider; 
GLabel label8; 
GCustomSlider mutationRateSlider; 
GButton pauseButton; 
GCheckbox predationCheck; 
